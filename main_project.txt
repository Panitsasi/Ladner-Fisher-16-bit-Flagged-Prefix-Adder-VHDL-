

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;


 entity main_project is 

      port(
       
        word1,word2:in   std_logic_vector(15 downto 0);
	output:out std_logic_vector(15 downto 0);

	carry_in:in std_logic 
       
     
       );

      end main_project;



 architecture arch_main_project of main_project is


component propagate_generate --first stage calculate p,g per bit
  port(
       
        A,B:in   std_logic;
        P,G:out   std_logic
     
       );

end component ;


component cell_input2   -- second stage black cell with 2 inputs
  port(
       
        g1,g2,p1,p2:in   std_logic;
        P_block2,G_block2:out   std_logic
     
       );

      


end component ;


-- signals 

signal P_first_stage,G_first_stage: std_logic_vector(15 downto 0 ); -- calculate per bit first stage 
signal g2_1,g4_3,g6_5,g8_7,g10_9,g12_11,g14_13,g16_15,p2_1,p4_3,p6_5,p8_7,p10_9,p12_11,p14_13,p16_15:std_logic;
signal g4_1,g8_5,g12_9,g16_13,p4_1,p8_5,p12_9,p16_13:std_logic;
signal g6_1,g8_1,g14_9,g16_9,p6_1,p8_1,p14_9,p16_9:std_logic;         
signal g16_1,g14_1,g12_1,g10_1,p16_1,p14_1,p12_1,p10_1:std_logic;    
signal g3_1,g5_1,g7_1,g9_1,g11_1,g13_1,g15_1,p3_1,p5_1,p7_1,p9_1,p11_1,p13_1,p15_1:std_logic; 
signal gbar1_1, gbar2_1,gbar3_1,gbar4_1,gbar5_1,gbar6_1,gbar7_1,gbar8_1,gbar9_1,gbar10_1,gbar11_1,gbar12_1,gbar13_1,gbar14_1,gbar15_1:std_logic ;
	begin

-- 1 stage 

      generate_label:
      for i in 0 to 15 generate

         first_stage_i : propagate_generate port map (word1(i),word2(i),P_first_stage(i),G_first_stage(i));

      end generate;
 
-- 2 stage 

      second_stage_first_cell : cell_input2 port map (G_first_stage(0),G_first_stage(1),P_first_stage(0),P_first_stage(1),p2_1,g2_1);
      second_stage_second_cell : cell_input2 port map (G_first_stage(2),G_first_stage(3),P_first_stage(2),P_first_stage(3),p4_3,g4_3);
      second_stage_third_cell : cell_input2 port map (G_first_stage(4),G_first_stage(5),P_first_stage(4),P_first_stage(5),p6_5,g6_5);
      second_stage_fourth_cell : cell_input2 port map (G_first_stage(6),G_first_stage(7),P_first_stage(6),P_first_stage(7),p8_7,g8_7);
      second_stage_fifth_cell : cell_input2 port map (G_first_stage(8),G_first_stage(9),P_first_stage(8),P_first_stage(9),p10_9,g10_9);
      second_stage_six_cell : cell_input2 port map (G_first_stage(10),G_first_stage(11),P_first_stage(10),P_first_stage(11),p12_11,g12_11);
      second_stage_seven_cell : cell_input2 port map (G_first_stage(12),G_first_stage(13),P_first_stage(12),P_first_stage(13),p14_13,g14_13);
      second_stage_eight_cell : cell_input2 port map (G_first_stage(14),G_first_stage(15),P_first_stage(14),P_first_stage(15),p16_15,g16_15);

-- 3 stage 

      g4_1<=g4_3 or (p4_3 and g2_1);
      p4_1<=p4_3 and p2_1;

      g8_5<=g8_7 or (p8_7 and g6_5);
      p8_5<=p8_7 and p6_5;


      g12_9<=g12_11 or (p12_11 and g10_9);
      p12_9<=p12_11 and p10_9;

      g16_13<=g16_15 or (p16_15 and g14_13);
      p16_13<=p16_15 and p14_13;


-- 4 stage


      g6_1<=g6_5 or (p6_5 and g4_1);
      p6_1<=p6_5 and p4_1;

      g8_1<=g8_5 or (p8_5 and g4_1);
      p8_1<=p8_5 and p4_1;


      g14_9<=g14_13 or (p14_13 and g12_9);
      p14_9<=p14_13 and p12_9;

      g16_9<=g16_13 or (p16_13 and g12_9);
      p16_9 <=p16_13 and p12_9;



-- 5 stage 


      g16_1<=g16_9 or (p16_9 and g8_1); -- isws na nai lathos 
      p16_1<=p16_9 and p8_1;

      g14_1<=g14_9 or (p14_9 and g8_1);
      p14_1<=p14_9 and p8_1;


      g12_1<=g12_9 or (p12_9 and g8_1);
      p12_1<=p12_9 and p8_1;

      g10_1<=g10_9 or (p10_9 and g8_1);
      p10_1 <=p10_9 and p8_1;


-- 6 stage

      g3_1<=G_first_stage(2) or (P_first_stage(2) and g2_1); 
      p3_1<=P_first_stage(2) and p2_1;

      g5_1<=G_first_stage(4) or (P_first_stage(4) and g4_1); 
      p5_1<=P_first_stage(4) and p4_1;

      g7_1<=G_first_stage(6) or (P_first_stage(6) and g6_1); 
      p7_1<=P_first_stage(6) and p6_1;



      g9_1<=G_first_stage(8) or (P_first_stage(8) and g8_1); 
      p9_1<=P_first_stage(8) and p8_1;


      g11_1<=G_first_stage(10) or (P_first_stage(10) and g10_1); 
      p11_1<=P_first_stage(10) and p10_1;

      g13_1<=G_first_stage(12) or (P_first_stage(12) and g12_1); 
      p13_1<=P_first_stage(12) and p12_1;

      g15_1<=G_first_stage(14) or (P_first_stage(14) and g14_1); 
      p15_1<=P_first_stage(14) and p14_1;

     
--7  stage grey cells 


gbar1_1<=G_first_stage(0) or (P_first_stage(0) and carry_in); -- carry_in = inc 
gbar2_1<=g2_1 or (p2_1 and carry_in);
gbar3_1<=g3_1 or (p3_1 and carry_in);
gbar4_1<=g4_1 or (p4_1 and carry_in);
gbar5_1<=g5_1 or (p5_1 and carry_in);
gbar6_1<=g6_1 or (p6_1 and carry_in);
gbar7_1<=g7_1 or (p7_1 and carry_in);
gbar8_1<=g8_1 or (p8_1 and carry_in);
gbar9_1<=g9_1 or (p9_1 and carry_in);
gbar10_1<=g10_1 or (p10_1 and carry_in);
gbar11_1<=g11_1 or (p11_1 and carry_in);
gbar12_1<=g12_1 or (p12_1 and carry_in);
gbar13_1<=g13_1 or (p13_1 and carry_in);
gbar14_1<=g14_1 or (p14_1 and carry_in);
gbar15_1<=g15_1 or (p15_1 and carry_in);

--8 STAGE

output(0)<=P_first_stage(0) xor carry_in ;
output(1)<=P_first_stage(1) xor gbar1_1;
output(2)<=P_first_stage(2) xor gbar2_1;
output(3)<=P_first_stage(3) xor gbar3_1;
output(4)<=P_first_stage(4) xor gbar4_1;
output(5)<=P_first_stage(5) xor gbar5_1;
output(6)<=P_first_stage(6) xor gbar6_1;
output(7)<=P_first_stage(7) xor gbar7_1;
output(8)<=P_first_stage(8) xor gbar8_1;
output(9)<=P_first_stage(9) xor gbar9_1;
output(10)<=P_first_stage(10) xor gbar10_1;
output(11)<=P_first_stage(11) xor gbar11_1;
output(12)<=P_first_stage(12) xor gbar12_1;
output(13)<=P_first_stage(13) xor gbar13_1;
output(14)<=P_first_stage(14) xor gbar14_1;
output(15)<=P_first_stage(15) xor gbar15_1;



		
	end arch_main_project;


